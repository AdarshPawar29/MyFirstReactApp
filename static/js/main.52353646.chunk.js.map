{"version":3,"sources":["components/layout/Header.js","components/TodoItem.js","components/Todos.js","components/AddTodo.js","components/Pages/About.js","App.js","serviceWorker.js","index.js"],"names":["headerStyle","background","color","textAlign","padding","linkStyle","textDecoration","Header","style","to","TodoItem","getStyle","backgroundColor","borderButtom","props","todo","completed","this","_id","title","console","log","type","onChange","markComplete","bind","btnStyle","onClick","delTodo","Component","border","borderRadius","cursor","float","Todos","todos","map","key","AddTodo","state","onSubmit","e","preventDefault","addTodo","setState","target","name","value","display","flex","placeholder","className","About","Fragment","App","id","updateTodo","axios","post","then","res","status","data","delete","filter","newTodo","uuid","v4","get","catch","error","exact","path","render","component","React","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.52353646.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nfunction Header(){\r\n    return (\r\n        <header style = {headerStyle}>\r\n            <h1>\r\n                Todo List\r\n            </h1>\r\n            <Link style={linkStyle} to = \"/\"> Home </Link>|<Link style={linkStyle} to = \"/about\"> About </Link>\r\n\r\n        </header>\r\n    )\r\n}\r\n\r\nconst headerStyle = {\r\n    background : '#333',\r\n    color : '#fff',\r\n    textAlign : 'center',\r\n    padding : '10px'\r\n} \r\n\r\nconst linkStyle = {\r\n    color: '#fff',\r\n    textDecoration: 'none'\r\n}\r\n\r\nexport default Header\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport class TodoItem extends Component {\r\n    getStyle = () => {\r\n        \r\n        return{\r\n            backgroundColor: '#f4f4f4',\r\n            padding: '10px',\r\n            borderButtom: '1px #ccc dotted',\r\n            textDecoration: this.props.todo.completed ? 'line-through' : 'none',\r\n           // backgroundColor: this.props.todo.completed ? '#f4f4f4' : '#ff0000'\r\n        }\r\n        \r\n        //if(this.props.todo.completed){\r\n        //     return {\r\n        //         textDecoration: 'line-through'\r\n        //     }\r\n        // }\r\n        // else{\r\n        //     return {\r\n        //         textDecoration: 'none'\r\n        //     }\r\n        // }\r\n    }\r\n\r\n\r\n    render() {\r\n        //pulling out the variables ID and TITLE from the prop so that we dont need to use this function many times \r\n        const {_id, title} = this.props.todo;\r\n        console.log(_id);\r\n        return (\r\n            <div style = {this.getStyle()}> \r\n                <p>\r\n                    <input type = \"checkbox\"  onChange = {this.props.markComplete.bind(this, _id) } />{''}\r\n                    { title }\r\n                    <button style = {btnStyle} onClick = {this.props.delTodo.bind(this, _id)} >X</button>\r\n                </p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n//PropTypes\r\nTodoItem.propTypes = {\r\n    todo: PropTypes.object.isRequired\r\n}\r\n// const itemStyle = {\r\n//     backgroundColor: '#f4f4f4' //we can use variable in the place of inline function with single {} <div style = {itemStyle}> else we use {{backgroundColor = '#somecolor'}}\r\n// }\r\n\r\nconst btnStyle = {\r\n    backgroundColor: '#ff0000',\r\n    color: '#fff',\r\n    border: 'none',\r\n    padding: '5px 9px',\r\n    borderRadius: '50%',\r\n    cursor: 'pointer',\r\n    float: 'right'\r\n}\r\n\r\n\r\nexport default TodoItem\r\n","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItem.js';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Todos extends Component {\r\n\r\n  \r\n\r\n  render(){\r\n      //console.log(this.props.todos); \r\n      //its coming from the state in App.js and we can accesing them with 'this.props' \r\n    return this.props.todos.map(todo => \r\n    // <h3>{todo.title}</h3>\r\n    <TodoItem key = {todo._id} todo = {todo} markComplete = {this.props.markComplete } delTodo = {this.props.delTodo} />\r\n    );\r\n  }\r\n}\r\n\r\n//PropTypes\r\nTodos.propTypes = {\r\n    todos: PropTypes.array.isRequired\r\n}\r\n\r\nexport default Todos;","import React, { Component } from 'react'\r\n\r\nexport class AddTodo extends Component {\r\n\r\n    state = {\r\n        title : ''\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.addTodo(this.state.title);\r\n        this.setState({ title: ''})\r\n        \r\n    }\r\n\r\n    onChange = (e) => this.setState({[e.target.name] : e.target.value});\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit = {this.onSubmit} style = {{ display: 'flex' }}>\r\n                <input\r\n                    type = 'text'\r\n                    name = 'title'\r\n                    style = {{ flex : '10', padding: '5px' }}\r\n                    placeholder = 'Add Todo ...'\r\n                    value = {this.state.title}\r\n                    onChange = {this.onChange}\r\n\r\n                />\r\n                <input\r\n                    type = 'submit'\r\n                    value = 'Submit'\r\n                    className = 'btn'\r\n                    style = {{flex : '1'}}\r\n                />\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddTodo\r\n","import React, { Component } from 'react'\r\n\r\nexport class About extends Component {\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <h1>About</h1>\r\n                <p>\r\n                    This is todo app v1.9\r\n                </p>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default About\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\r\nimport Header from './components/layout/Header'\r\nimport Todos from './components/Todos';\r\nimport AddTodo from './components/AddTodo'\r\nimport About from './components/Pages/About'\r\nimport uuid from 'uuid' //to crate random id\r\nimport axios from 'axios'\r\n// import toastr from 'reactjs-toastr';\r\n// import 'reactjs-toastr/lib/toast.css';\r\n\r\n\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    todos: []\r\n  }\r\n\r\n  componentDidMount(){\r\n    axios.get('http://localhost:5000/todoList/')\r\n    .then(res => {\r\n      this.setState({todos: res.data.data})\r\n    })\r\n    .catch((error)=>{\r\n      console.log(error);\r\n    })\r\n  }\r\n\r\n  //update completed\r\n\r\n  //toggle complete \r\n  markComplete = id => {\r\n    //console.log(id) // we getting the id from Todos.js fun then TodoItem.js fun and with the help of .bind\r\n    \r\n    this.setState({todos: this.state.todos.map(todo => {\r\n       if(todo._id === id){\r\n        todo.completed = !todo.completed;\r\n        let updateTodo = {\r\n          _id: id,\r\n          id : todo.id,\r\n          title: todo.title,\r\n          completed : todo.completed,\r\n        }\r\n        console.log(updateTodo);\r\n        axios.post('http://localhost:5000/todoList/update/'+id,updateTodo)\r\n          .then(res => {\r\n        if(res.status === 200){\r\n          console.log(res => res.data);\r\n        }\r\n         //console.log(\"im in\");\r\n        });\r\n       }\r\n       return todo;\r\n     })})\r\n  }\r\n\r\n  //delete todo item \r\n\r\n  delTodo = id => {\r\n    //to copy all the variables which already there we can ues sprade oprator which is '...'\r\n    //console.log(id);\r\n    //console.log(\"***\");\r\n    axios.delete('http://localhost:5000/todoList/'+id)\r\n      .then(res => {\r\n        //console.log(res, \"SSSSSSSSS\")\r\n        if(res.status === 200){\r\n          this.setState({ todos: [...this.state.todos.filter(todo => todo._id !== id)]});\r\n        }\r\n      });\r\n\r\n  }\r\n  // delTodo = (id) => {\r\n  //   //to copy all the variables which already there we can ues sprade oprator which is '...'\r\n    \r\n  //   axios.delete('http://localhost:5000/todoList/'+id)\r\n  //     .then(res => {\r\n  //       this.setState({ todos: [...this.state.todos.filter(todo => todo._id !== id)]});\r\n  //     });\r\n  // }\r\n\r\n  //add todo\r\n  addTodo = title => {\r\n    let newTodo = {\r\n      id : uuid.v4(),\r\n      title,\r\n      completed: false\r\n    }\r\n    \r\n    axios.post('http://localhost:5000/todoList/add', newTodo)\r\n    .then(res => {\r\n      if(res.status === 200){\r\n        newTodo._id = res.data;\r\n        this.setState({ todos: [...this.state.todos, newTodo]})\r\n      }\r\n      // console.log()\r\n    })\r\n   }\r\n\r\n  render(){\r\n    console.log(this.state.todos);\r\n    return (\r\n      <Router>\r\n        <div className=\"App\">\r\n          <div className=\"container\">\r\n          <Header/>\r\n          <Route exact path=\"/\" render = {props => (\r\n            <React.Fragment>\r\n              <AddTodo addTodo = {this.addTodo}/>\r\n              <Todos todos={this.state.todos} markComplete = {this.markComplete} delTodo = {this.delTodo}/>\r\n            </React.Fragment>\r\n          )}/>\r\n          <Route path=\"/about\" component={About} />\r\n          </div>\r\n        </div>\r\n      </Router>      \r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();\n"],"sourceRoot":""}